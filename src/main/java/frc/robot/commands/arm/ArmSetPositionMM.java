// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands.arm;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.subsystems.Arm;

/**
 *
 */
public class ArmSetPositionMM extends Command {
    
    double currentPosition;
    int desiredPosition;
    
    public ArmSetPositionMM(int goal) {
        requires(Robot.arm);
        desiredPosition = goal;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.arm.configStart_MM(desiredPosition);
        Robot.arm.move_MM(desiredPosition);

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return Robot.arm.onTarget_MM(desiredPosition);
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        switch(desiredPosition){
            // case Arm.ARM_POSITION_CLIMB:
            case Arm.ARM_POSITION_PICKUP_CARGO:
            case Arm.ARM_POSITION_ZERO:
                // In these cases we want the motor controller to relax and let 
                // gravity do the work
                Robot.arm.setMotor(0.0);
                break;
            default:
                // Leave the closed-loop position running
                break;
        }
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}